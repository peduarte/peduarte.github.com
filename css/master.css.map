{"version":3,"sources":["assets/css/_global.styl","assets/css/_settings.styl","node_modules/rupture/rupture/index.styl","assets/css/_typography.styl","assets/css/_header.styl","assets/css/_projects.styl","assets/css/_tags.styl","assets/css/_keyframes.styl","assets/css/_cv.styl"],"names":[],"mappings":"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","sourcesContent":["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n\nbody {\n  font-family: $fontDefault;\n  font-size: $fontBase;\n  line-height: 26px;\n  font-smoothing: antialiased;\n  background: $colorYellow;\n  color: $colorBlack;\n\n  {baseline-grid};\n}\n\n\na {\n  color: $colorBlack;\n  text-decoration: none;\n  font-weight: 700;\n}\n\n\nmain {\n  background: $colorBlack;\n  transition: background-color 600ms linear;\n  position: relative;\n  overflow: hidden;\n\n  &,\n  a {\n    color: $colorWhite;\n  }\n\n  +above(5) {\n    .no-js & {\n      margin-left: 50%;\n    }\n\n    .cssanimations & {\n      marign-left: 0;\n      transform: translate3d(-100%, 0, 0);\n      animation: slideMain 1400ms 600ms forwards cubic-bezier(0.77, 0, 0.175, 1);\n    }\n  }\n}\n","/**\n*\n* Settings\n*\n**/\n\n\n$fontDefault = 'Lora', serif;\n$fontHighlight = 'Oswald', \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n\n$lineHeight = 26px;\n\n// Defining font sizes\n$fontSmall = 13px;\n$fontBase = 16px;\n$fontMedium = 20px;\n$fontLarge = 26px;\n$fontXLarge = 42px;\n$fontXXLarge = 68px;\n$fontHuge = 110px;\n\n// Defining colors\n$colorWhite = #ffffff;\n$colorBlack = #000000;\n$colorRed = #cc0000;\n$colorYellow = #F9E720;\n$colorFaded = lighten(#000000, 50%);\n\n// Animation\n$animationDelayMain = 800ms;\n$easeInQuart = cubic-bezier(0.895, 0.03, 0.685, 0.22);\n$easeOutQuart = cubic-bezier(0.165, 0.84, 0.44, 1);\n$easeInOutCirc = cubic-bezier(0.785, 0.135, 0.15, 0.86);\n$easeInOutQuad =  cubic-bezier(0.455, 0.03, 0.515, 0.955)\n\n// Mixin to show a baseline grid\n// only visible when body has 'debug' class\nbaseline-grid = @block {\n  position: relative;\n\n  &:after {\n\t\t/* autoprefixer: off */\n    content: \"\";\n    position: absolute;\n    top: -26px;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    z-index: 9;\n\n    background-image: -moz-linear-gradient(top,transparent 95%, rgba(0, 0, 0, .1) 100%);\n    background-image: -webkit-gradient(linear,left top,left bottom,color-stop(95%,transparent),color-stop(100%, rgba(0, 0, 0, .1)));\n    background-image: -webkit-linear-gradient(top,transparent 95%, rgba(0, 0, 0, .1) 100%);\n    background-image: -o-linear-gradient(top,transparent 95%, rgba(0, 0, 0, .1) 100%);\n    background-image: -ms-linear-gradient(top,transparent 95%, rgba(0, 0, 0, .1) 100%);\n    background-image: linear-gradient(top, rgba(0, 0, 0, .1) 95%,#cc0000 100%);\n\n    -webkit-background-size: 100% 26px;\n    -moz-background-size: 100% 26px;\n    -ms-background-size: 100% 26px;\n    background-size: 100% 26px;\n    display: none;\n  }\n\n  &.debug:after {\n    display: block;\n    pointer-events: none;\n    opacity: 0;\n    animation: fadeIn 400ms forwards;\n  }\n}\n\n\n// Mixins simply to store CSS rules\nrule--small = @block {\n  font-size: $fontSmall;\n  line-height: 2.0000em; /* 26px */\n  padding-top: 2.0000em;\n  padding-bottom: 0;\n  letter-spacing: 0;\n}\n\nrule--base = @block {\n  font-size: $fontBase;\n  line-height: 1.6250em; /* 26px */\n  padding-top: 1.6250em;\n  padding-bottom: 0;\n  letter-spacing: 0;\n}\n\nrule--medium = @block {\n  font-size: $fontMedium;\n  font-weight: 300;\n  line-height: 1.3000em; /* 26px */\n  padding-top: 1.3000em;\n  padding-bottom: 0;\n}\n\nrule--large = @block {\n  font-family: $fontHighlight;\n  font-size: $fontLarge;\n  font-weight: 300;\n  line-height: 1.0000em; /* 26px */\n  padding-top: 1.0000em;\n  padding-bottom: 0;\n}\n\nrule--xlarge = @block {\n  font-family: $fontHighlight;\n  font-size: $fontXLarge;\n  font-weight: 300;\n  line-height: 1.2381em; /* 52px */\n  padding-top: 0.6190em;\n  padding-bottom: 0;\n}\n\nrule--xxlarge = @block {\n  font-family: $fontHighlight;\n  font-size: $fontXXLarge;\n  font-weight: 300;\n  line-height: 1.1471em; /* 78px */\n  padding-top: 0.3824em;\n  padding-bottom: 0;\n  text-transform: uppercase;\n}\n\nrule--huge = @block {\n  font-family: $fontHighlight;\n  font-size: $fontHuge;\n  font-weight: 300;\n  line-height: 1.19em; /* 130px */\n  padding-top: 0.2364em;\n  padding-bottom: 0;\n  text-transform: uppercase;\n}\n\ntype--small() {\n  {rule--small};\n}\n\ntype--base() {\n  {rule--base};\n}\n\ntype--medium(applyMobileFirst = true) {\n\tif applyMobileFirst {\n    type--base();\n    +above(4) {\n      {rule--medium};\n    }\n\t} else {\n\t\t{rule--medium};\n\t}\n}\n\ntype--large(applyMobileFirst = true) {\n  if applyMobileFirst {\n    type--medium(false);\n    +above(4) {\n      {rule--large};\n    }\n  }\n  else {\n    {rule--large};\n  }\n}\n\ntype--xlarge(applyMobileFirst = true) {\n  if applyMobileFirst {\n    type--large(false);\n    +above(4) {\n      {rule--xlarge};\n    }\n  }\n  else {\n    {rule--xlarge};\n  }\n}\n\ntype--xxlarge(applyMobileFirst = true) {\n  if applyMobileFirst {\n    type--xlarge(false);\n    +above(4) {\n      {rule--xxlarge};\n    }\n  }\n  else {\n    {rule--xxlarge};\n  }\n}\n\ntype--huge(applyMobileFirst = true) {\n  if applyMobileFirst {\n    type--xxlarge(false);\n    +above(4) {\n      {rule--huge};\n    }\n  }\n  else {\n    {rule--huge};\n  }\n}\n","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n","/**\n*\n* Typography\n*\n* Lloyds Experiments\n*\n* Fluxx\n* @author Pedro Duarte\n**\n*\n**/\n\n// Just normalizing text\n// Recommend using padding instead of margin\nh1, h2, h3, h4, h5, p {\n  margin: 0;\n}\n\n// Definitions\n.small,\nsmall {\n  type--small();\n}\n\n.base,\np,\nul,\nol,\ndl {\n  type--base();\n}\n\n.medium,\nh4 {\n  type--medium();\n}\n\n.large,\nh3 {\n  type--large();\n}\n\n.xlarge,\nh2 {\n  type--xlarge();\n}\n\n.xxlarge,\nh1 {\n  type--xxlarge();\n}\n\n.huge {\n  type--huge();\n}\n\nli > p {\n  padding-top: 0;\n}\n",".Header {\n  padding: $lineHeight $lineHeight $lineHeight*2;\n\n  +above(3) {\n    padding: $lineHeight $lineHeight*2 $lineHeight*2;\n  }\n\n  +above(4) {\n    padding: $lineHeight*2 $lineHeight*3 $lineHeight*3;\n  }\n\n  +above(5) {\n    padding-top: 0;\n    padding-bottom: 0;\n    position: fixed;\n    height: 100%;\n    width: 50%;\n    top: 0;\n    bottom: 0;\n\n    .cssanimations & {\n      opacity: 0;\n      animation: showCopy 0ms 1400ms linear forwards;\n    }\n  }\n}\n\n\n.Header-content {\n  +above(5) {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    max-width: 475px;\n    margin-right: $lineHeight*2;\n  }\n}\n\n.Header-title {\n  position: relative;\n  padding-bottom: $lineHeight;\n  margin-bottom: $lineHeight;\n  text-transform: uppercase;\n\n  &:after {\n    content: \"\";\n    width: 100%;\n    max-width: $lineHeight * 4;\n    height: 10px;\n    background: $colorBlack;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n  }\n}\n\n.Header-subtitle {\n  font-weight: 700;\n\n  +above(5) {\n    .cssanimations & {\n      opacity: 0;\n      animation: fadeIn 800ms 500ms ease-in-out forwards;\n    }\n  }\n}\n\n.Header-intro {\n  padding: 0;\n  margin-bottom: $lineHeight;\n\n  +above(5) {\n    .cssanimations & {\n      opacity: 0;\n      animation: fadeIn 800ms 550ms ease-in-out forwards;\n    }\n  }\n}\n",".Projects {\n\tlist-style: none;\n\tpadding: $lineHeight;\n\n\t+above(3) {\n\t\tpadding: $lineHeight*2;\n\t}\n\n\t+above(4) {\n\t\tpadding: $lineHeight $lineHeight*3;\n\t}\n\n\t+above(5) {\n    padding-top: $lineHeight;\n\t\tpadding-bottom: $lineHeight;\n\n    .cssanimations & {\n      opacity: 0;\n      animation: showProjects 1800ms 1800ms $easeInOutQuad forwards;\n    }\n\t}\n}\n\n.Project-item {\n  position: relative;\n}\n\n.Project-link {\n\tdisplay: block;\n\tborder-bottom: 1px solid $colorWhite;\n\tpadding: $lineHeight 0 ($lineHeight - 1);\n  font-weight: normal\n  transition: box-shadow 400ms $easeOutQuart;\n\n  &:hover {\n    box-shadow: inset 0 -9px 0 0 $colorWhite;\n  }\n}\n\n.Project-client {\n\ttext-transform: uppercase;\n\ttype--medium(false); // set false to stop resizing on media queries\n\tpadding: 0;\n  color: $colorYellow;\n  font-family: $fontHighlight;\n}\n\n.Project-name {\n  text-transform: uppercase;\n  type--medium(false); // set false to stop resizing on media queries\n  padding: 0;\n  font-family: $fontHighlight;\n}\n",".Tags {\n\tlist-style: none;\n\tpadding: 0;\n\tfont-size: $fontSmall;\n\tfont-style: italic;\n\ttext-align: right;\n\n  position: absolute;\n  right: 0;\n  bottom: $lineHeight;\n\n  display: none;\n\n  +above(3) {\n    display: block;\n  }\n}\n\n.Tag {\n\tdisplay: inline-block;\n\n\t&:after { content: \",\\00a0\"; }\n\t&:last-child:after { content: \"\" }\n}\n","@keyframes fadeIn {\n  0% {\n    transform: translateY(-6px);\n  }\n  25% {\n    transform: translateY(0);\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes showCopy {\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes expandBar {\n  100% {\n    height: 100%;\n  }\n}\n\n@keyframes slideMain {\n  10% {\n    margin-left: 0;\n  }\n  100% {\n    margin-left: 50%;\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes showProjects {\n  0% {\n    // transform: translate3d(-50px, 0, 0);\n  }\n  100% {\n    opacity: 1;\n  }\n}\n",".cv {\n  padding: $lineHeight $lineHeight $lineHeight*2;\n  background-color: $colorWhite;\n\n  .content {\n    max-width: 960px;\n    margin: 0 auto;\n    font-size: 0;\n  }\n\n  section {\n    border-top: 1px solid #ccc;\n    margin-top: $lineHeight;\n  }\n\n  .heading, .subheading, .copy, .info {\n    display: inline-block;\n    vertical-align: top;\n  }\n\n  .heading {\n    +above(4) {\n      width: 18%;\n    }\n  }\n\n  .info {\n    +above(4) {\n      width: 82%;\n    }\n  }\n\n  .subheading {\n    width: 25%;\n    margin-right: 5%;\n\n    p {\n      opacity: 0;\n      transition: opacity 800ms $easeOutQuart;\n      font-size: $fontSmall;\n      font-style: italic;\n    }\n  }\n\n  .copy {\n    width: 70%;\n  }\n\n  .career {\n    margin-bottom: $lineHeight;\n\n    &:hover {\n      .subheading {\n        p {\n          opacity: 1;\n        }\n      }\n    }\n  }\n\n  h1, h2, h3, h4, p, ul {\n    type--base();\n    font-family: $fontDefault;\n  }\n\n  ul {\n    list-style: inside;\n\n    ul {\n      padding-top: 0;\n      padding-bottom: $lineHeight;\n      padding-left: $lineHeight;\n    }\n  }\n\n  .cv-inline\n  .cv-tags {\n    li {\n      display: inline;\n      &:after { content: \",\\00a0\"; }\n      &:last-child:after { content: \"\" }\n    }\n  }\n\n  .cv-tags {\n    padding-top: 0;\n\n    font-style: italic;\n\n    &,\n    a {\n      color: #666;\n    }\n\n    a {\n      font-weight: 400;\n\n      &:hover {\n        color: $colorBlack;\n      }\n    }\n  }\n\n  @media print {\n    h1, h2, h3, h4, p, ul {\n      type--small();\n      font-size: 12px;\n      line-height: 13px;\n    }\n\n    section {\n\n    }\n\n    .career {\n      margin-bottom: 0;\n    }\n\n  }\n}\n"]}